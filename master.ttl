; .======================================
; | Driver for all macro files
; |--------------------------------------
; | Determines the type of device being run, and calls appropriate subroutines
; |	Language documentation: https://teratermproject.github.io/manual/4/en/macro/
; | Repo for this project: https://github.com/JohnHeinlein/Teraterm-Cisco-Macros
; '--------------------------------------
:start

; Useful string aliases
dir_flash = 'util\dir_flash.ttl'
stat = 'util\stat.ttl'
db = 'util\debug.ttl'
db2 = 'util\debug2.ttl'
CRITICAL_FILES = '((SPA)|(PTW)|(SE[0-9])|(E(X?)[0-9])|(\.bin)|(\.conf)|(\.lic)|(\.pkg)|(\.pack)$)' ; Regular expression matching files we DON'T want to delete

; Used in some functions as a cross-routine message.
; Currently only used in flash_wipe to determine which flags are supported on the 'delete' command
; Set at the start of the appropriate rommon file
DEVICE = ''

; .======================================
; | Verbosity
; |--------------------------------------
; | Note this is just dialog boxes, it does NOT use TeraTerm's built-in logging.
; | I would like to add text logging at some point.
; '--------------------------------------

stat_mode = 0
if stat_mode then
	statstr = ''
	newstat = ''
	gethostname hostname
	statusbox statstr hostname

	newstat = hostname
	strconcat newstat ' init'
	include stat
endif

; .======================================
; | Debugging & Verbosity
; |--------------------------------------
; | Running files directly messes up the relative paths.
; | Set 'totest' to the relative path of the file you want to debug.
; | If 'totest' is blank, debugging messages are enabled and the macro runs as normal
; |
; | debug = 1 -> Some extra logging
; | debug = 2 -> Log entry & exit of subroutines
; | stat_mode = 1 -> Basic verbosity. Can pull focus from other desktops and windows
; |
; '--------------------------------------
debug_mode = 0
totest = ''

if debug_mode > 0 call debug ; Contined at the end of this file

; .======================================
; | Model selector
; |--------------------------------------
; | Once in ROMMON, we use some heuristic to determine the model of switch.
; | Not trivial, since different switches can have dramatically different 
; | bootloaders and rom monitors.
; '--------------------------------------
setsync 1
sendln 'version'
recvln ; Weirdly, triggers on 'version' unless we have this receive. Probably sync shenanigans
recvln
setsync 0
if result = 1 then
	; Catalyst 2960 Series Switches
	pause 1
	strmatch inputstr '^C2960.?\s'	
	if result = 1 then
		newstat = '**C2960 ROMMON Detected**'
		include stat
		include 'rommon\2960.ttl'
		include 'os\switch.ttl'
		goto finish ; Prevents falling through to each check (if/else chains would look at lot worse)
	endif
	
	; Catalyst 3000 Series Switches
	strmatch inputstr '^CAT3K_CAA\s'
	if result = 1 then
		newstat = '**C3K ROMMON Detected**'
		include stat
		include 'rommon\cat3k.ttl'
		include 'os\cat3k.ttl'
		goto finish
	endif
	
	; Catalyst 3750 series switches
	strmatch inputstr '^C([0-9]){4}[A-Z]?\s'
	if result = 1 then
		newstat = '**Other Catalyst ROMMON Detected**'
		include stat
		include 'rommon\2960.ttl'
		include 'os\switch.ttl'
		goto finish
	endif
	
	; Detect any 'rommon' prompt, as opposed to a 'switch' prompt, to assume we're in a router.
	; Typically triggers when the 'version' command fails, as this generally indicates the unit is NOT a switch.
	timeout = 1
	waitregex 'rommon [0-9]+'
	if result > 0 then
		; Check for ASA, since they use disk0: for the SSD wheras routers will err on `dir`
		sendln 'dir'
		recvln
		recvln
		
		; Router
		strmatch inputstr 'Incorrect Usage'
		if result > 0 then		
			newstat = #10'Router assumed'
			include stat
			include 'rommon\isr.ttl'
			include 'os\router.ttl'
			goto finish
		endif
		
		; Security Appliance
		strmatch inputstr 'device table'
		if result > 0 then
			newstat = #10'ASA assumed'
			include stat
			include 'rommon\asa.ttl'
			include 'os\security.ttl'
			goto finish
		endif
	endif
	
	if result = 0 goto no_match
endif

:finish
	if debug_mode = 0 then
		; clearscreen 1
		include dir_flash
	endif

	gethostname hostname
	endMessage = #10#10
	strconcat endMessage hostname
	strconcat endMessage ' finished! Run again?'
	strconcat statstr endMessage
	
	yesnobox statstr 'Done!'
	if result = 1 then
		timeout = 0
		goto start
	endif
	end
end

:no_match
	yesnobox 'No supported device detected, exit?' 'Err'
	if result = 0 then
		timeout = 0
		goto start
	endif
end

:debug
	gethostname hostname
	strconcat hostname ' [DEBUG]'
	newstat = 'init'
	include db
	
	strlen totest
	if result > 0 then
		include totest
		if stat_mode = 1 messagebox statstr hostname
		end
	endif
return
